

import edu.princeton.cs.introcs.StdDraw;

public class Gridn {
	private int grid[][] ;

	
	public Gridn (int[][] grid) {
		
		this.grid = grid;
	}

	public void setGridn (int[][] grid,int x, int y) {
		for (int row = 0; row < x; ++row) {
	         for (int col = 0; col < y; ++col) {
	            grid[row][col] = 0;
	         }
	      }
		this.grid = grid;
	}

	public int[][] getGrid() {
		return grid;
	}
	
	
	public String Display() {
		for (int row = 0; row < grid.length; ++row) {
			System.out.println("");
	         for (int col = 0; col < grid.length; ++col) {
	        	if(grid[row][col]==1) {
	            System.out.print( " X " );
	            System.out.print(" ");
	        	}
	        	if(grid[row][col]==2) {
		            System.out.print( " 0 " );
		            System.out.print(" ");
		        	}
	        	if(grid[row][col]==0) {
		            System.out.print( " O " );
		            System.out.print(" ");
		        	}
	        
	         }
	         System.out.println("");
	      }
         return "";
	}
	public int Verify() {
			   
		 for (int row = 0; row < grid.length; ++row) {
			  int rowcount =0;
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 1) {
		            	rowcount++;
		            	if(rowcount== 3) {System.out.println("c1");return 1;}
		            }else { rowcount = 0;}
		 				}
		         
		 }
		 for (int row = 0; row < grid.length; ++row) {
			  int rowcount =0;
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 2) {
		            	rowcount++;
		            	if(rowcount== 3) {System.out.println("c2");return 2;}
		            }else { rowcount = 0;}
		 				}
		         
		 }
		    
		         	
		 for (int row = 0; row < grid.length; ++row) {
			  int rowcount =0;
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[col][row] == 1) {
		            	rowcount++;
		            	if(rowcount== 3) {System.out.println("l1");return 1;}
		            }else { rowcount = 0;}
		 				}
		         
		 }
		 for (int row = 0; row < grid.length; ++row) {
			  int rowcount =0;
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[col][row] == 2) {
		            	rowcount++;
		            	if(rowcount== 3) {System.out.println("l2");return 2;}
		            }else { rowcount = 0;}
		 				}
		         
		 }
		 int c1 =0;
		 for (int row = 0; row < grid.length; ++row) {
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 2 && row == col) {
		            	c1++;
		            	if(c1== 3) {System.out.println("d2");return 2;}
		            }
		 }}
		 int c2 =0;
		 for (int row = 0; row < grid.length; ++row) {
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 1 && row == col) {
		            	c2++;
		            	if(c2== 3) {System.out.println("d1");return 1;}
		            }
		 				}
		         
		 }
		 int c3 =0;
		 for (int row = 0; row < grid.length; ++row) {
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 1 && ((row ==1 &&col ==1 )|| (row==0 && col==2) ||(col==0 && row==2))) {
		            	c3++;
		            	
		            	if(c3== 3) {System.out.println("c3");return 1;}
		            }
		 				}
		         
		 }
		 int c4 =0;
		 for (int row = 0; row < grid.length; ++row) {
		         for (int col = 0; col < grid.length; ++col) {
		            if(grid[row][col] == 2 && ((row ==1 &&col ==1) || (row==0 && col==2) ||(col==0 && row==2))) {
		            	c4++;
		            	
		            	if(c4== 3) {System.out.println("c4");return 2;}
		            }
		 				}
		         
		 }
			 int count =0 ;
			 for (int row = 0; row < grid.length; ++row) {
		         for (int col = 0; col < grid.length; ++col) {
		            if (grid[row][col] == 2 || grid[row][col]==1) {count++;}
		           
		         }
		      }
			 
			 if (count==(grid.length)*(grid.length)) { 
				System.out.println("plein");
			 	return -1;}else {return 0;}
			 
			         }

	public boolean Fill(int x,int y) {
		if (grid[x][y] == 0) {
			return false;
		}else {
			return true;
		}
	} 
	public int[][] Insert(int x, int y,Player player) {
		grid[x][y]= player.getPion();
		return grid;
	} 
	
	public void disG() {	
	double t=1000;
	double a=t/3;
	StdDraw.enableDoubleBuffering();
	
 	
	
	for (int row = 0; row < grid.length; ++row) {
	         for (int col = 0; col < grid.length; ++col) {
	        	 
	
	for (double u = 0.0; true; u += 0.05) {
	       double x = 50*u;
	       
	       
	       if (grid[row][col]==1) {
	        		 int[] co = {row+1,col+1};
	      StdDraw.picture(a*co[1]-a/2,a*co[0]-a/2, "croix.png",x,x);//32 15 ,5
	        	 }
	        	 if (grid[row][col]==2) {
	        		 int[] co = {row+1,col+1};
	        		 
	     StdDraw.setPenColor(StdDraw.BLUE); StdDraw.filledCircle(a*co[1]-a/2,a*co[0]-a/2,x/3);//32 15 ,5
	     StdDraw.setPenColor(StdDraw.WHITE); StdDraw.filledCircle(a*co[1]-a/2,a*co[0]-a/2,x/3-x/9);//32 15 ,5
	        	 }StdDraw.show();
	       
	        	   
	       if (x>250) {break;}
	       
	   }
		
	        		  }
	        		 
	         }
	} 
	
	

}
	
		
	
	
	
	
	
